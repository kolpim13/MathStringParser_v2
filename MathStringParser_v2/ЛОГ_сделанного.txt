Версия 1.0-Релиз:)
Программа умеет преобразовывать выражения и функции в числовые выражения и просчитывать их. Понимает функции с 1 аргументом и 1 осью.
Алгоритм вычисления рекурсивный, но за счет того, что после вычисления текущей ячейки удаляет следущую - не потимальный(надо дошагать до индекса)
Обладает относительной устойчивостью к неправильному вводу
Предположительно не все баги вычеслены.

ЛОГ:
09/09/2020. Версия 1.05
-Добавлена тестовая надстройка для просчета значения функцииот интервала доинтервала
-написано приложение, что может строить графики заданной функции на заданном интервале и считать значение этой функции, предполагая, что аргумнт == 1
11/09/2020 начата работа над версией 2.0
-тип делегата для математических операций над ячейками заменен стандартным double Func(double, double).
Это облегчело добавление стороних действий над ячейками, но замедлило вычесления
-Функции расчета класса Parser более не статические. (Для возможности вести паралельный расчеты с помощью разных экземпляров класса)
-Функции по первоначальной обработки, проверки и блокировки(в случае надобности) входящей строки строки было решено вынести в отдельный класс


Планы на версию 1.5:
1)Убрать List<Cell> listToMerge из аргумента функции за ненадобностью; 
ref index можно добавить в сам класс. Продумать его обнуление при каждом следущем расчете.
2)Переработать делегаты так, что б можно было добвлять операции над числами, а не над ячейками
(уже в самом классе,что оно трансформировалось в операции над ячейками)
Соответственно перепесать начальные функции с действиями над числами.
3)Добавить возможность добавлять функции, которые оперируют более чем одним аргументом(подумать как лучше это сделать)
4)Относительно полноценная система логов по желанию.
5)Более глубокая проверка на корректность ввода данных(скобки, длинна, порядок следования) изначально
6)Исключение, которо бы выкидывало из любого уровня вложенности рекурсии, если что-то идет не так и уведомляло обэтом
7)Добавить возможность указывать какие оси(x\y\z e.g.) учавствуют. Возможность подставлять вместо каждого определенные значения.
8)Добавить "{}" для указания интервала функци, на котором надо ее просчитывать и шага
9)Может можно заментить перебор списков с добавлеными функциями на что-то другое(подумать)
10)Главный алгоритм с условного сделать последовательным, что в купе с 5 пунктом будет сделать проще.

Планы на версию 2.0:
1)Пересмотреть алгоритм расчета, провести замеры по быстродействию и памяти. Оставить болееудачный(или оба как разные библиотеки)
2)Дописать программную надстройку, которая бы по указанному интервалу и шагу сама просчитывала все несколько раз с 
указаным выражением и записывала куда-то результаты.

Связанные проекты:

